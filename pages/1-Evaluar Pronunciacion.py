import streamlit as st
import speech_recognition as sr
from gtts import gTTS
from io import BytesIO
import random
import difflib

# Configurar p√°gina
st.set_page_config(page_title="Pronunciaci√≥n Ingl√©s", page_icon="üó£Ô∏è", layout="centered")

st.title("üó£Ô∏è Pr√°ctica de Pronunciaci√≥n en Ingl√©s")
st.markdown("Escucha la frase, rep√≠tela en voz alta, gr√°bala con tu celular o PC, s√∫bela y eval√∫a tu pronunciaci√≥n.")

# Lista de frases
frases = [
    "Hello, how are you?",
    "I would like a cup of coffee.",
    "Can you help me, please?",
    "This is a beautiful day.",
    "I love learning English.",
    "Where is the nearest station?",
    "The weather is nice today.",
    "I have two brothers and one sister.",
    "What time is the meeting?",
    "I am going to the supermarket."
]

# Funci√≥n para reproducir texto como audio
def reproducir_texto(texto, idioma="en"):
    try:
        tts = gTTS(text=texto, lang=idioma)
        buffer = BytesIO()
        tts.write_to_fp(buffer)
        buffer.seek(0)
        return buffer
    except Exception as e:
        st.error(f"‚ùå Error al generar audio: {str(e)}")
        return None

# Funci√≥n para capturar voz desde archivo de audio
def capturar_voz_desde_archivo(archivo_audio):
    r = sr.Recognizer()
    try:
        with sr.AudioFile(archivo_audio) as source:
            audio = r.record(source)
            texto = r.recognize_google(audio, language="en-US")
            return texto
    except sr.UnknownValueError:
        st.warning("‚ö†Ô∏è No se entendi√≥ el audio.")
    except sr.RequestError:
        st.error("‚ùå Error al contactar el servicio de reconocimiento.")
    except Exception as e:
        st.error(f"‚ùå Error al procesar audio: {str(e)}")
    return None

# Funci√≥n para comparar palabra por palabra
def comparar_palabras(original, hablado):
    orig = original.lower().split()
    dicho = hablado.lower().split()
    resultado = []

    sm = difflib.SequenceMatcher(None, orig, dicho)
    for tag, i1, i2, j1, j2 in sm.get_opcodes():
        if tag == "equal":
            for i in range(i1, i2):
                resultado.append(("‚úÖ", orig[i]))
        else:
            for i in range(i1, i2):
                resultado.append(("‚ùå", orig[i]))
    return resultado

# Mostrar frase
if "frase_actual" not in st.session_state:
    st.session_state.frase_actual = random.choice(frases)

st.markdown("## üì£ Frase para practicar:")
st.markdown(f"### \"{st.session_state.frase_actual}\"")

# Reproducir pronunciaci√≥n correcta
audio_correcto = reproducir_texto(st.session_state.frase_actual)
if audio_correcto:
    st.markdown("üîä Pronunciaci√≥n correcta:")
    st.audio(audio_correcto, format="audio/mp3")

# Bot√≥n para cambiar frase
if st.button("üîÑ Cambiar frase"):
    st.session_state.frase_actual = random.choice(frases)
    st.rerun()

# Subir archivo de audio
st.markdown("## üé§ Sube tu grabaci√≥n de la frase")
archivo_audio = st.file_uploader("Elige un archivo de audio (.wav o .mp3)", type=["wav", "mp3"])

if archivo_audio is not None:
    with st.spinner("üéß Analizando tu pronunciaci√≥n..."):
        texto_usuario = capturar_voz_desde_archivo(archivo_audio)

    if texto_usuario:
        st.markdown(f"**üó£ Lo que se entendi√≥:** \"{texto_usuario}\"")

        # Reproducir lo que el sistema entendi√≥
        audio_usuario = reproducir_texto(texto_usuario)
        if audio_usuario:
            st.markdown("üîÅ Tu pronunciaci√≥n (lo que se entendi√≥):")
            st.audio(audio_usuario, format="audio/mp3")

        # Comparaci√≥n palabra por palabra
        st.markdown("üîç **Evaluaci√≥n palabra por palabra:**")
        resultado = comparar_palabras(st.session_state.frase_actual, texto_usuario)

        for estado, palabra in resultado:
            color = "green" if estado == "‚úÖ" else "red"
            st.markdown(f"<span style='color:{color}'>{estado} {palabra}</span>", unsafe_allow_html=True)

        # Porcentaje general
        aciertos = sum(1 for estado, _ in resultado if estado == "‚úÖ")
        total = len(resultado)
        porcentaje = round((aciertos / total) * 100, 2) if total > 0 else 0
        st.markdown(f"üìä **Coincidencia general:** {porcentaje}%")

        if porcentaje >= 85:
            st.success("üéâ ¬°Excelente pronunciaci√≥n!")
        elif porcentaje >= 60:
            st.warning("üü° Aceptable, pero puedes mejorar.")
        else:
            st.error("‚ùå Necesitas m√°s pr√°ctica.")
